description = "Create pull/merge request and close related issue using git_mcp_server tools"
prompt = '''
# ðŸš€ Pull Request Creation

**Issue ID:** {{args}}

Analyze the changes made thoroughly and consider multiple ways to present them clearly and effectively in the pull/merge request.

## PR Creation Process

1. **Prepare Branch**
   Run git commands to add, check status, and commit changes

2. **Fork Detection and Repository Analysis**
   - Use `get_fork_info()` to check if current repository is a fork
   - If it's a fork, identify the upstream repository for PR creation
   - Determine the correct target repository (fork vs upstream)

3. **Push to Remote**
   Push the current branch to remote repository

4. **Create Pull/Merge Request with Fork Support**
   Use `create_merge_request()` with enhanced fork support:

   **For GitHub Fork-to-Upstream PRs:**
   - Source branch: `username:branch-name` format (automatically detected)
   - Target repository: Upstream repository (parent)
   - Target branch: Usually `main` or `master`

   **For GitLab Fork-to-Upstream MRs:**
   - Source branch: `branch-name` format (simple branch name)
   - Use `target_project_id` parameter for upstream project
   - Target branch: Usually `main` or `master`

   **For Same-Repository PRs/MRs:**
   - Source branch: `branch-name` format (current behavior)
   - Target repository: Current repository
   - Target branch: As specified or default

   **PR Parameters:**
   - Craft a descriptive title linking to issue
   - Create comprehensive description that clearly explains the solution
   - Closes #[issue-id] in description
   - Consider appropriate labels and reviewers

5. **Available Fork MCP Tools**
   - `create_fork(platform, project_id, **kwargs)` - Create a fork
   - `get_fork_info(platform, project_id)` - Check fork status
   - `list_forks(platform, project_id)` - List repository forks
   - `create_merge_request()` - Enhanced with cross-repo support

6. **PR Description Template**
   ```
   ## Summary
   Implements [feature description] as requested in issue #[issue-id]

   ## Changes Made
   - [List of changes]

   ## Testing
   - [Test coverage details]

   ## Documentation
   - [Documentation updates]

   Closes #[issue-id]
   ```

7. **Final Steps**
   - Link PR to original issue (use `update_issue()` to close issue if needed)
   - Request code review via `get_merge_request_details()` for tracking
   - Monitor CI/CD pipeline
   - Address review feedback

**Workflow Complete!** From issue analysis to PR creation.
'''
