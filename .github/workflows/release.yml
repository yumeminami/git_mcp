name: Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write
  id-token: write

env:
  PYTHON_VERSION: "3.13"

jobs:
  build:
    name: "Build Distribution"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: "Install uv"
        uses: astral-sh/setup-uv@v4

      - name: "Set up Python"
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: "Install dependencies"
        run: uv sync --all-extras

      - name: "Build package"
        run: uv build

      - name: "Upload build artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  test-install:
    name: "Test Installation"
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.13"]
    steps:
      - name: "Download build artifacts"
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: "Install uv"
        uses: astral-sh/setup-uv@v4

      - name: "Set up Python ${{ matrix.python-version }}"
        run: uv python install ${{ matrix.python-version }}

      - name: "Test wheel installation"
        run: |
          # Install from wheel
          WHEEL_FILE=$(find dist -name "*.whl" | head -n1)
          uv tool install "$WHEEL_FILE"

          # Test CLI commands
          git-mcp --help
          git-mcp-server --help

          # Test import
          uv run --with "$WHEEL_FILE" python -c "import git_mcp; print('Package installed and imports successfully')"

  publish-pypi:
    name: "Publish to PyPI"
    needs: [build, test-install]
    runs-on: ubuntu-latest
    steps:
      - name: "Download build artifacts"
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: "Publish to PyPI"
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          print-hash: true

  create-release:
    name: "Create GitHub Release"
    needs: [build, test-install]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: "Download build artifacts"
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: "Extract version from tag"
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: "Generate release notes"
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## 🚀 Git MCP Server ${{ steps.version.outputs.version }}

          ### Installation

          ```bash
          # Install via pip
          pip install git_mcp

          # Install via uv
          uv tool install git_mcp

          # Configure with Claude Code
          git-mcp-server --install-claude
          ```

          ### Usage

          1. **Configure platforms:**
             ```bash
             git-mcp config add my-gitlab gitlab --url https://gitlab.com
             ```

          2. **Use issue-to-code workflow in Claude Code:**
             ```bash
             /issue <issue-url>    # Analyze issue
             /plan                 # Generate development plan
             /implement           # Implement functionality
             /test                # Generate tests
             /doc                 # Update documentation
             /pr <issue-id>       # Create pull request
             ```

          ### What's New

          - 🤖 **MCP Server Integration**: Full Model Context Protocol support for Claude Code
          - 🎯 **Issue-to-Code Workflow**: Complete automation from issue analysis to PR creation
          - 🔧 **Multi-Platform Support**: Unified interface for GitLab (GitHub coming soon)
          - 📋 **Slash Commands**: Pre-configured workflow commands for Claude Code
          - 🔐 **Secure Configuration**: Keyring-based token storage
          - 🚀 **Easy Installation**: One-command setup with automatic Claude Code integration

          ### Files

          - `git_mcp-${{ steps.version.outputs.version }}-py3-none-any.whl` - Python wheel
          - `git_mcp-${{ steps.version.outputs.version }}.tar.gz` - Source distribution
          EOF

      - name: "Create GitHub Release"
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: "Git MCP Server ${{ steps.version.outputs.version }}"
          body_path: release_notes.md
          draft: false
          prerelease: false

      - name: "Upload Release Assets"
        run: |
          for file in dist/*; do
            gh release upload ${{ steps.version.outputs.version }} "$file"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
